#!/usr/bin/env php
<?php
require 'vendor/autoload.php';
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Psr7;

const TOKEN_URL = 'https://auth.aweber.com/oauth2/token';
const BASE_URI = 'https://api.aweber.com/1.0/';


// Create a OAuth2 client configured to use OAuth for authentication
// Load credentials into the Oauth client
$credentials = parse_ini_file('credentials.ini', true);

$client = new GuzzleHttp\Client();

$accessToken = refreshToken($client, $credentials);

/**
 * Get all of the entries for a collection
 *
 * @param Client $client HTTP Client used to make a GET request
 * @param string $accessToken Access token to pass in as an authorization header
 * @param string $url Full url to make the request
 * @return array Every entry in the collection
 */
function getCollection($client, $accessToken, $url) {
    $collection = array();
    while (isset($url)) {
        $request = $client->get(
            $url,
            [
                'headers' => [
                    'Authorization' => 'Bearer ' . $accessToken
                ]
            ]
        );
        $body = $request->getBody();
        $page = json_decode($body, true);
        $collection = array_merge($page['entries'], $collection);
        $url = isset($page['next_collection_link']) ? $page['next_collection_link'] : null;
    }
    return $collection;
}

$accounts = getCollection($client, $accessToken, BASE_URI .'accounts');
$listsUrl = $accounts[0]['lists_collection_link'];  // choose the first account
$listName = 'abc';
$params = array(
    'ws.op' => 'find',
    'name' => $listName
);
$findListUrl = $listsUrl . '?' . http_build_query($params);
$lists = getCollection($client, $accessToken, $findListUrl);

if (isset($lists[0]['self_link'])) {
    $tagUrl = $lists[0]['self_link'] . '/tags';  // choose the first list
    $request = $client->request(
        'GET', $tagUrl, [
            'headers' => [
                'Authorization' => 'Bearer ' . $accessToken
            ]
        ]
    );
    $tags = $request->getBody();
    print_r(json_decode($tags, true));
} else {
    echo 'Could not find a list with name: ' . $listName;
}

function refreshToken($client, array $credentials) {
    $clientId = $credentials['clientId'];
    $clientSecret = $credentials['clientSecret'];
    $accessToken = $credentials['accessToken'];
    $refreshToken = $credentials['refreshToken'];
    $response = $client->post(
        TOKEN_URL, [
            'auth' => [
                $clientId, $clientSecret
            ],
            'json' => [
                'grant_type' => 'refresh_token',
                'refresh_token' => $refreshToken
            ]
        ]
    );
    $body = $response->getBody();
    $newCreds = json_decode($body, true);
    $accessToken = $newCreds['access_token'];
    $refreshToken = $newCreds['refresh_token'];
    $fp = fopen('credentials.ini', 'wt');
    fwrite($fp,
    "
    clientId = {$clientId}
    clientSecret = {$clientSecret}
    accessToken = {$accessToken}
    refreshToken = {$refreshToken}
    ");
    fclose($fp);
    chmod('credentials.ini', 0600);
    echo "Access Token Refreshed. Updated credentials.ini with your new credentials\n";
    return $accessToken;
}