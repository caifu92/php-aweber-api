#!/usr/bin/env php
<?php
require 'vendor/autoload.php';
use GuzzleHttp\Client;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Subscriber\Oauth\Oauth1;

// Create a Guzzle client configured to use OAuth for authentication
$stack = HandlerStack::create();
$client = new Client([
    'base_uri' => 'https://api.aweber.com/1.0/',
    'handler' => $stack,
    'auth' => 'oauth'
]);

// Load credentials into the Oauth client
$credentials = parse_ini_file('credentials.ini');
$requestMiddleware = new Oauth1([
    'consumer_key' => $credentials['consumerKey'],
    'consumer_secret' => $credentials['consumerSecret'],
    'token' => $credentials['accessToken'],
    'token_secret' => $credentials['tokenSecret'],
]);
$stack->push($requestMiddleware);

/**
 * Get all of the entries for a collection
 *
 * @param Client $client HTTP Client used to make a GET request
 * @param string $url Relative path or full url to make the request
 * @return array Every entry in the collection
 */
function getCollection($client, $url) {
    $collection = array();
    while (isset($url)) {
        $body = $client->get($url)->getBody();
        $page = json_decode($body, true);
        $collection = array_merge($page['entries'], $collection);
        $url = isset($page['next_collection_link']) ? $page['next_collection_link'] : null;
    }
    return $collection;
}

// get all the accounts entries
$accounts = getCollection($client, 'accounts');
$accountUrl = $accounts[0]['self_link'];

// get all the list entries for the first account
$listsUrl = $accounts[0]['lists_collection_link'];
$lists = getCollection($client, $listsUrl);

// find out if a subscriber exists on the first list
$email = 'example@example.com';
$params = array(
    'ws.op' => 'find',
    'email' => $email
);
$subsUrl = $lists[0]['subscribers_collection_link'];
$findUrl = $subsUrl . '?' . http_build_query($params);
$foundSubscribers = getCollection($client, $findUrl);
echo 'Found subscribers: ';
print_r($foundSubscribers);

if (isset($foundSubscribers[0]['self_link'])) {
    // update the subscriber if they are on the first list
    $data = array(
        'custom_fields' => array('awesomeness' => 'really awesome'),
        'tags' => array('add' => array('prospect'))
    );
    $subscriberUrl = $foundSubscribers[0]['self_link'];
    $subscriberResponse = $client->patch($subscriberUrl, ['json' => $data])->getBody();
    $subscriber = json_decode($subscriberResponse, true);
    echo 'Updated Subscriber: ';
} else {
    // add the subscriber if they are not already on the first list
    $data = array(
        'email' => $email,
        'custom_fields' => array('awesomeness' => 'somewhat'),
        'tags' => array('prospect')
    );
    $body = $client->post($subsUrl, ['json' => $data]);

    // get the subscriber entry using the Location header from the post request
    $subscriberUrl = $body->getHeader('Location')[0];
    $subscriberResponse = $client->get($subscriberUrl)->getBody();
    $subscriber = json_decode($subscriberResponse, true);
    echo 'Created Subscriber: ';
}
print_r($subscriber);

// get the activity for the subscriber
$params = array('ws.op' => 'getActivity');
$activityUrl = $subscriberUrl . '?' . http_build_query($params);
$activity = $client->get($activityUrl)->getBody();
echo 'Subscriber Activity: ';
print_r(json_decode($activity, true));

// delete the subscriber; this can only be performed on confirmed subscribers
// or a 405 Method Not Allowed will be returned
if ($subscriber['status'] == 'subscribed') {
    $client->delete($subscriberUrl);
    echo 'Deleted subscriber with email: ' . $email;
}
